AWSTemplateFormatVersion: '2010-09-09'
Description: |
  A VPC with an internet gateway, two route tables (pub/priv), network access
  control list, three subnets groups (2 pub, 1 priv), a security group for HTTP,
  HTTPS, SSH and ICMP, an S3 bucket and two EC2 instances one of which has a
  public IP and is reachable via ping and SSH.

Parameters:
  SSHKeyParameter:
    Description: Public SSH key
    Default: >-
      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMZ+lUbV6jHfVLtgY5UpIHbJfHC9IMqh+jadsVGBRZyN ahmed.mahdi@bbc.co.uk
    Type: String

Mappings:
  Vpc:
    Cidr:
      CidrBlock: 10.0.0.0/16
    InstanceTenancy:
      Tenancy: default
  EC2:
    Instance:
      Type: t2.micro
    Image:
      Id: ami-0b45ae66668865cd6
  # map of port numbers and protocols for acceptable network traffic
  Network:
    HTTP:
      Protocol: tcp
      ProtocolNumber: 6
      Port: 80
    HTTPS:
      protocol: tcp
      ProtocolNumber: 6
      Port: 443
    SSH:
      Protocol: tcp
      ProtocolNumber: 6
      Port: 22
    ICMPRequest:
      Protocol: icmp
      ProtocolNumber: 1
      Code: 0
      Type: 8
    ICMPReply:
      Protocol: icmp
      ProtocolNumber: 1
      Code: 0
      Type: 0

Resources:
  # VPC
  NewVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - Vpc
        - Cidr
        - CidrBlock
      InstanceTenancy: !FindInMap
        - Vpc
        - InstanceTenancy
        - Tenancy
      Tags:
        - Key: name
          Value: !Join
            - ''
            - - PO-CF-practice-
              - !Ref AWS::Region

  # internet gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: name
          Value: PO-IGW

  # connect IGW to VPC
  VPCConnIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref NewVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: name
          Value: pub-route-table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: name
          Value: priv-route-table

  # route to connect RT to IGW. Note: local route comes for free
  RouteToIGW:
    Type: AWS::EC2::Route
    DependsOn: VPCConnIGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  # NACL with allow policy for http(s), ssh and icmp
  NACList:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: name
          Value: PO-NACL

  # HTTP inbound traffic
  NCLHTTPIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: !FindInMap
          - Network
          - HTTP
          - Port
        To: !FindInMap
          - Network
          - HTTP
          - Port
      Protocol: !FindInMap
        - Network
        - HTTP
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: !FindInMap
        - Network
        - HTTP
        - Port

  # HTTP outbound traffic
  NCLHTTPOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: !FindInMap
          - Network
          - HTTP
          - Port
        To: !FindInMap
          - Network
          - HTTP
          - Port
      Protocol: !FindInMap
        - Network
        - HTTP
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: !FindInMap
        - Network
        - HTTP
        - Port

  # HTTPS inbound traffic
  NCLHTTPSIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: !FindInMap
          - Network
          - HTTPS
          - Port
        To: !FindInMap
          - Network
          - HTTPS
          - Port
      Protocol: !FindInMap
        - Network
        - HTTPS
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: !FindInMap
        - Network
        - HTTPS
        - Port

  # HTTPS outbound traffic
  NCLHTTPSOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: !FindInMap
          - Network
          - HTTPS
          - Port
        To: !FindInMap
          - Network
          - HTTPS
          - Port
      Protocol: !FindInMap
        - Network
        - HTTPS
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: !FindInMap
        - Network
        - HTTPS
        - Port

  # SSH inbound traffic
  NCLSSHIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: !FindInMap
          - Network
          - SSH
          - Port
        To: !FindInMap
          - Network
          - SSH
          - Port
      Protocol: !FindInMap
        - Network
        - SSH
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: !FindInMap
        - Network
        - SSH
        - Port

  # SSH outbound traffic
  NCLSSHOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: !FindInMap
          - Network
          - SSH
          - Port
        To: !FindInMap
          - Network
          - SSH
          - Port
      Protocol: !FindInMap
        - Network
        - SSH
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: !FindInMap
        - Network
        - SSH
        - Port

  # ICMP inbound request
  NCLPingIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: !FindInMap
        - Network
        - ICMPRequest
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: 100
      Icmp:
        Code: !FindInMap
          - Network
          - ICMPRequest
          - Code
        Type: !FindInMap
          - Network
          - ICMPRequest
          - Type

  # ICMP outbound reply
  NCLPingOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACList
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: !FindInMap
        - Network
        - ICMPReply
        - ProtocolNumber
      RuleAction: allow
      RuleNumber: 100
      Icmp:
        Code: !FindInMap
          - Network
          - ICMPReply
          - Code
        Type: !FindInMap
          - Network
          - ICMPReply
          - Type

  # create a subnet in each availability zone. 2 pub, 1 priv
  # Note: the London region has 3 availability zones
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref NewVPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - b
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref NewVPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - c
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref NewVPC

  # Public Subnet 1 -> Public RouteTable
  PubSub1ToPubRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Public Subnet 2 -> Public RouteTable
  PubSub2ToPubRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private Subnet 1 -> Private RouteTable
  Priv1SubToPrivRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  # attach subnets to NACL
  Pub1ToNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NACList
      SubnetId: !Ref PublicSubnet1

  Pub2ToNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NACList
      SubnetId: !Ref PublicSubnet2

  Priv1ToNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NACList
      SubnetId: !Ref PrivateSubnet1

  # security groups for EC2 instances
  SGHTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      GroupName: PO HTTP SG
      VpcId: !Ref NewVPC
      # outbound traffic
      SecurityGroupEgress:
        # http
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0  # traffic can come from anywhere
          Description: Outbound HTTP traffic
          FromPort: !FindInMap
            - Network
            - HTTP
            - Port
          ToPort: !FindInMap
            - Network
            - HTTP
            - Port
        # https
        - IpProtocol: tcp
          Description: Outbound HTTPS traffic
          CidrIp: 0.0.0.0/0
          FromPort: !FindInMap
            - Network
            - HTTPS
            - Port
          ToPort: !FindInMap
            - Network
            - HTTPS
            - Port
        # ssh
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          Description: Outboung SSH traffic
          FromPort: !FindInMap
            - Network
            - SSH
            - Port
          ToPort: !FindInMap
            - Network
            - SSH
            - Port
        # ping request
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          # ICMP uses the type instead of normal port number
          FromPort: !FindInMap
            - Network
            - ICMPReply
            - Type
          # ICMP uses the code instead of a normal port number
          ToPort: !FindInMap
            - Network
            - ICMPReply
            - Code
      # inbound traffic
      SecurityGroupIngress:
        # http
        - IpProtocol: tcp
          Description: Allow Inbound HTTP traffic
          CidrIp: 0.0.0.0/0
          FromPort: !FindInMap
            - Network
            - HTTP
            - Port
          ToPort: !FindInMap
            - Network
            - HTTP
            - Port
        # https
        - IpProtocol: tcp
          Description: Allow Inbound HTTPS traffic
          CidrIp: 0.0.0.0/0
          FromPort: !FindInMap
            - Network
            - HTTPS
            - Port
          ToPort: !FindInMap
            - Network
            - HTTPS
            - Port
        # ssh
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          Description: Outboung SSH traffic
          FromPort: !FindInMap
            - Network
            - SSH
            - Port
          ToPort: !FindInMap
            - Network
            - SSH
            - Port
        # ping request
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          # ICMP uses the type instead of normal port number
          FromPort: !FindInMap
            - Network
            - ICMPRequest
            - Type
          # ICMP uses the code instead of a normal port number
          ToPort: !FindInMap
            - Network
            - ICMPRequest
            - Code

  # S3
  PoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: po-test-bucket1 # must be globally unique and lower case
      Tags:
        - Key: description
          Value: PO-S3-Bucket

  # SSH key
  SSHKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: a777m-ssh-key
      KeyType: ed25519
      PublicKeyMaterial: !Ref SSHKeyParameter
      Tags:
        - Key: key-name
          Value: a777m-ssh-key

  # EC2 in public subnet 1
  PoEC2Instance1:
    Type: AWS::EC2::Instance
    DependsOn: IGW
    Properties:
      ImageId: !FindInMap
        - EC2
        - Image
        - Id
      InstanceType: !FindInMap
        - EC2
        - Instance
        - Type
      KeyName: !Ref SSHKeyPair
      # give this host a public ip address
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          Description: Custom public IP NI
          DeviceIndex: 0
          GroupSet:
            - !Ref SGHTTP
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: description
          Value: EC2-public-subnet-1

  # EC2 in public subnet 2
  PoEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - EC2
        - Image
        - Id
      InstanceType: !FindInMap
        - EC2
        - Instance
        - Type
      SubnetId: !Ref PublicSubnet2
      KeyName: !Ref SSHKeyPair
      SecurityGroupIds:
        - !Ref SGHTTP
      Tags:
        - Key: description
          Value: EC2-public-subnet-1

Outputs:
  MyStacksRegion:
    Value: !Ref "AWS::Region"

  EC2PublicDNSName:
    Value: !GetAtt PoEC2Instance1.PublicDnsName

  EC2PublicIpAddr:
    Value: !GetAtt PoEC2Instance1.PublicIp

  VpcId:
    Value: !GetAtt NewVPC.VpcId

  VpcCidrBlock:
    Value: !GetAtt NewVPC.CidrBlock

  PublicSubnet1Id:
    Value: !GetAtt PublicSubnet1.SubnetId

  PublicSubnet1AZ:
    Value: !GetAtt PublicSubnet1.AvailabilityZone

  PublicSubnet2Id:
    Value: !GetAtt PublicSubnet2.SubnetId

  PublicSubnet2AZ:
    Value: !GetAtt PublicSubnet2.AvailabilityZone
